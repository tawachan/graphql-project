### This file was autogenerated by GraphQL Nexus
### Do not make changes to this file directly

type Chat {
  id: ID!
  room: Room
  text: String!
}

input ChatCreateInput {
  id: ID
  room: RoomCreateOneInput
  text: String!
}

enum ChatOrderByInput {
  createdAt_ASC
  createdAt_DESC
  id_ASC
  id_DESC
  text_ASC
  text_DESC
  updatedAt_ASC
  updatedAt_DESC
}

input ChatWhereInput {
  AND: [ChatWhereInput!]
  id: ID
  id_contains: ID
  id_ends_with: ID
  id_gt: ID
  id_gte: ID
  id_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_not: ID
  id_not_contains: ID
  id_not_ends_with: ID
  id_not_in: [ID!]
  id_not_starts_with: ID
  id_starts_with: ID
  NOT: [ChatWhereInput!]
  OR: [ChatWhereInput!]
  room: RoomWhereInput
  text: String
  text_contains: String
  text_ends_with: String
  text_gt: String
  text_gte: String
  text_in: [String!]
  text_lt: String
  text_lte: String
  text_not: String
  text_not_contains: String
  text_not_ends_with: String
  text_not_in: [String!]
  text_not_starts_with: String
  text_starts_with: String
}

input ChatWhereUniqueInput {
  id: ID
}

type Mutation {
  createChat(data: ChatCreateInput!): Chat!
  createRoom(data: RoomCreateInput!): Room!
}

type Query {
  chat(where: ChatWhereUniqueInput!): Chat
  chats(
    after: String
    before: String
    first: Int
    last: Int
    orderBy: ChatOrderByInput
    skip: Int
    where: ChatWhereInput
  ): [Chat!]!
  room(where: RoomWhereUniqueInput!): Room
  rooms(
    after: String
    before: String
    first: Int
    last: Int
    orderBy: RoomOrderByInput
    skip: Int
    where: RoomWhereInput
  ): [Room!]!
  user(where: UserWhereUniqueInput!): User
  users(
    after: String
    before: String
    first: Int
    last: Int
    orderBy: UserOrderByInput
    skip: Int
    where: UserWhereInput
  ): [User!]!
}

type Room {
  id: ID!
  name: String
  status: RoomStatus
}

input RoomCreateInput {
  id: ID
  name: String
  status: RoomStatus
}

input RoomCreateOneInput {
  connect: RoomWhereUniqueInput
  create: RoomCreateInput
}

enum RoomOrderByInput {
  createdAt_ASC
  createdAt_DESC
  id_ASC
  id_DESC
  name_ASC
  name_DESC
  status_ASC
  status_DESC
  updatedAt_ASC
  updatedAt_DESC
}

enum RoomStatus {
  LIMITED
  PRIVATE
  PUBLIC
}

input RoomWhereInput {
  AND: [RoomWhereInput!]
  id: ID
  id_contains: ID
  id_ends_with: ID
  id_gt: ID
  id_gte: ID
  id_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_not: ID
  id_not_contains: ID
  id_not_ends_with: ID
  id_not_in: [ID!]
  id_not_starts_with: ID
  id_starts_with: ID
  name: String
  name_contains: String
  name_ends_with: String
  name_gt: String
  name_gte: String
  name_in: [String!]
  name_lt: String
  name_lte: String
  name_not: String
  name_not_contains: String
  name_not_ends_with: String
  name_not_in: [String!]
  name_not_starts_with: String
  name_starts_with: String
  NOT: [RoomWhereInput!]
  OR: [RoomWhereInput!]
  status: RoomStatus
  status_in: [RoomStatus!]
  status_not: RoomStatus
  status_not_in: [RoomStatus!]
}

input RoomWhereUniqueInput {
  id: ID
  name: String
}

type User {
  id: ID!
  name: String!
}

enum UserOrderByInput {
  createdAt_ASC
  createdAt_DESC
  id_ASC
  id_DESC
  name_ASC
  name_DESC
  updatedAt_ASC
  updatedAt_DESC
}

input UserWhereInput {
  AND: [UserWhereInput!]
  id: ID
  id_contains: ID
  id_ends_with: ID
  id_gt: ID
  id_gte: ID
  id_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_not: ID
  id_not_contains: ID
  id_not_ends_with: ID
  id_not_in: [ID!]
  id_not_starts_with: ID
  id_starts_with: ID
  name: String
  name_contains: String
  name_ends_with: String
  name_gt: String
  name_gte: String
  name_in: [String!]
  name_lt: String
  name_lte: String
  name_not: String
  name_not_contains: String
  name_not_ends_with: String
  name_not_in: [String!]
  name_not_starts_with: String
  name_starts_with: String
  NOT: [UserWhereInput!]
  OR: [UserWhereInput!]
}

input UserWhereUniqueInput {
  id: ID
}
